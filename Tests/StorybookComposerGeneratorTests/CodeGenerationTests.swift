//
//  CodeGenerationTests.swift
//
//
//  Created by Kamil Strzelecki on 17/09/2023.
//

@testable import StorybookComposerGenerator
import _SwiftSyntaxTestSupport
import XCTest

final class CodeGenerationTests: XCTestCase {
    func testCodeGeneration_whenMacroAttachedToExtensionDecl() throws {
        let source = """
        @StorybookComponent
        extension Namespace.MyComponent {}
        """

        let generated = """
        //
        // Generated by StorybookComposer by Kamil Strzelecki.
        //

        import SwiftUI
        import StorybookComposer


        extension StorybookView: SwiftUI.View {
            public var body: some SwiftUI.View {
                StorybookComposer.StorybookComponentList {
                    StorybookComponentRow(provider: Namespace.MyComponent._storybookComponentProvider)
                }
            }
        }
        """

        try assertCodeGeneration(source: source, generated: generated)
    }

    func testCodeGeneration_whenMacroAttachedToStructDecl() throws {
        let source = """
        @StorybookComponent
        struct MyButton: View {
            var body: some View {
                Color.red
            }
        }
        """

        let generated = """
        //
        // Generated by StorybookComposer by Kamil Strzelecki.
        //

        import SwiftUI
        import StorybookComposer


        extension StorybookView: SwiftUI.View {
            public var body: some SwiftUI.View {
                StorybookComposer.StorybookComponentList {
                    StorybookComponentRow(provider: MyButton._storybookComponentProvider)
                }
            }
        }
        """

        try assertCodeGeneration(source: source, generated: generated)
    }

    private func assertCodeGeneration(source: String, generated: String) throws {
        let provider = MockFileProvider(source: source)
        let file = InputSourceFile(provider: provider)
        let context = CodeGenerationContext(additionalImports: [])
        try file.parse(codeGenerationContext: context)

        let actual = context.finalize()
        assertStringsEqualWithDiff(actual, generated)
    }
}

fileprivate struct MockFileProvider: InputSourceFileProvider {
    let path = "Macintosh HD/File.swift"
    let source: String

    func load() throws -> String {
        return source
    }
}
